#!/bin/bash
#
# check - Searching a JBT log file for critical issues or selected information.
#
# Distributed under the GNU General Public License version 2 or later, Copyright (c) 2024 Heiko Lübbe
# https://github.com/muhme/joomla-branches-tester

if [[ $(dirname "$0") != "scripts" || ! -f "scripts/helper.sh" ]]; then
  echo "Please run me as 'scripts/info'. Thank you for your cooperation! :)"
  exit 1
fi

function help {
  echo "
    info – Displaying critical issues or selected information from a JBT log file.
           The optional 'jbt' argument displays the JBT log messages.
           The optional 'scripts' argument displays start and stop messages for JBT scripts.
           The optional argument 'help' displays this page. For full details see https://bit.ly/JBT-README.
           If no filename is specified, the latest log file is used.

           $(random_quote)
  "
}

file=""
jbt=false
scripts=false
while [ $# -ge 1 ]; do
  if [[ "$1" =~ ^(help|-h|--h|-help|--help|-\?)$ ]]; then
    source scripts/helper.sh
    help
    exit 0
  elif [ "$1" = "jbt" ]; then
    jbt=true
    shift # Argument is eaten as to show JBT information.
  elif [ "$1" = "scripts" ]; then
    scripts=true
    shift # Argument is eaten as to show only the start and stop messages.
  elif [ -f "logs/$1" ] || [ -f "$1" ]; then
    # Ensure file name only, relative and absolute file names are working.
    file=$(basename "$1")
    file="logs/${file}"
    shift # Argument is eaten as log file name.
  else
    source scripts/helper.sh
    help
    error "Argument '$1' is not valid."
    exit 1
  fi
done

if [[ ! -f "${file}" ]]; then
  # shellcheck disable=SC2012 # find newest file, as ordered by file name
  file="logs/$(ls logs | tail -1)"
  if [[ ! -f "${file}" ]]; then
    source scripts/helper.sh
    error "No log file."
    exit 1
  fi
fi
# We assume now '$file' exists
echo "${file}:"

if [ "${jbt}" = "true" ]; then
  grep '\*\*\*' "${file}"
elif [ "${scripts}" = "true" ]; then
  grep -e '<<<' -e '>>>' "${file}"
else
  grep -v \
    -e 'Configure to catch all PHP errors' \
    -e 'liberror-perl' \
    -e 'symfony/error-handler' \
    -e 'fatal-error.html' \
    -e 'system-admin-error.css' \
    -e 'system-site-error.css' \
    -e 'system-site-error_rtl.css' \
    -e 'languageErrors/widget.css' \
    -e 'Stopping and removing JBT Docker container' \
    -e 'Container .* Stopping' \
    -e 'Container .* Stopped' \
    -e 'symfony/stopwatch' \
    -e 'overrid' "${file}" \
    -e 'pear-build-defaultuser' | \
  grep -i --color=always \
    -e ERR \
    -e error \
    -e fatal \
    -e stop \
    -e 'not found'
fi
