#!/bin/bash
#
# info - Retrieves Joomla Branches Tester status information.
#
# Distributed under the GNU General Public License version 2 or later, Copyright (c) 2024-2025 Heiko Lübbe
# https://github.com/muhme/joomla-branches-tester

if [[ $(dirname "$0") != "scripts" || ! -f "scripts/helper.sh" ]]; then
  echo "Please run me as 'scripts/info'. Thank you for your cooperation! :)"
  exit 1
fi

source scripts/helper.sh

function help {
  echo "
    info – Retrieves Joomla Branches Tester status information.

           The optional 'instance' argument only shows the Joomla Branches Tester instance details.
           The optional 'base' argument only shows the details of the base Docker containers.
           The optional argument ‘history’ only shows the recorded activities of the Joomla branch tester.
           Optional Joomla instance arguments can be one or more of installed: ${allInstalledInstances[*]}.
           The optional argument 'help' displays this page. For full details see https://bit.ly/JBT-README.
           If no argument is provided, all information is displayed.
    $(random_quote)"
}

# shellcheck disable=SC2207 # There are no spaces in instance numbers
allInstalledInstances=($(getAllInstalledInstances))

if [ $# -eq 0 ]; then
  # shellcheck disable=SC2207 # There are no spaces in instance numbers
  all_todos=("instance" "base" $(getAllInstalledInstances) "history")
else
  all_todos=()
fi

while [ $# -ge 1 ]; do
  if [[ "$1" =~ ^(help|-h|--h|-help|--help|-\?)$ ]]; then
    help
    exit 0
  elif [ "$1" = "instance" ]; then
    all_todos+=("$1")
    shift # Argument is eaten as to show only JBT information.
  elif [ "$1" = "base" ]; then
    all_todos+=("$1")
    shift # Argument is eaten as to show only base containers.
  elif [ -d "joomla-$1" ]; then
    all_todos+=("$1")
    shift # Argument is eaten as one instance.
  elif [ "$1" = "history" ]; then
    all_todos+=("$1")
    shift # Argument is eaten as to show activities only
  else
    help
    error "Argument '$1' is not valid."
    exit 1
  fi
done

docker_running=false
if docker info >/dev/null 2>&1; then
  docker_running=true
else
  log "Docker is NOT running?"
fi

for todo in "${all_todos[@]}"; do
  if [ "${todo}" = "instance" ]; then
    # Get the current local version and the latest version from the GitHub repository
    local_version=$(cat VERSION)
    # Ignore failures (e.g., if the system is offline).
    git_version=$(curl -s -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/muhme/joomla-branches-tester/main/VERSION || true)
    # Real compare version numbers as raw.githubusercontent.com is always a little behind the times
    version_gt() {
        [ "$(printf '%s\n' "$@" | sort -V | tail -n 1)" != "$1" ]
    }
    header "Joomla Branches Tester (JBT) version ${local_version}"
    if version_gt "${local_version}" "${git_version}"; then
        red "There is a newer JBT version ${git_version} available. Please run 'git pull' to stay current."
    fi

    if ${docker_running}; then
      echo "  Docker version $(docker version --format '{{.Server.Version}}') is running with" \
        "$(docker ps -q | wc -l | tr -d ' ') containers and $(docker images -q | wc -l | tr -d ' ') images"
      docker inspect jbt-network|grep EnableIPv6| sed -e 's/[ ]*//' -e 's/[",]//g' -e 's/^/  /'
    fi

  elif [ "$todo" = "base" ]; then

    if ${docker_running}; then
      header "Base Containers"
      for container in "${JBT_BASE_CONTAINERS[@]}"; do
        if [ "$(docker ps -q -f "name=${container}")" ]; then
          padded_container=$(printf "%-11s" "$container")
          ports=$(docker port "${container}" | awk '{printf "%s; ", $0} END {print ""}' | sed 's/; $/\n/')
          echo "  $padded_container is running, ports: $ports"
        else
          echo "  " && error "${container} is not running."
        fi
      done
    fi

  elif [ "$todo" != "history" ]; then # Installed Joomla instance

    instance="$todo"
    branch_name=$(docker exec "jbt-${instance}" bash -c "git branch -r --contains HEAD 2>/dev/null | head -1 | sed 's|[ ]*origin/||'")
    if [ -n "${branch_name}" ]; then
      header "jbt-${instance} Branch ${branch_name}"
    else
      tag_name=$(docker exec "jbt-${instance}" bash -c "git describe --tags 2>/dev/null; true")
      if [ -n "${tag_name}" ]; then
        header "jbt-${instance} Tag ${tag_name}"
      else
        header "jbt-${instance} ¿Grafted?"
      fi
    fi

    if ${docker_running}; then
      if [ "$(docker ps -q -f "name=jbt-${instance}")" ]; then
        ports=$(docker port "jbt-${instance}" | awk '{printf "%s; ", $0} END {print ""}' | sed 's/; $/\n/')
        echo "  Container jbt-${instance} is running, ports: $ports"
      else
        echo "  Container jbt-${instance} is NOT running."
      fi
    fi
    if [ -d "joomla-${instance}" ]; then

      version_file="joomla-${instance}/libraries/src/Version.php"
      if [ -f "${version_file}" ]; then
        product=$(grep "const PRODUCT" "${version_file}" | awk -F"'" '{print $2}')
        major_version=$(grep "const MAJOR_VERSION" "${version_file}" | awk -F" " '{print $NF}' | tr -d ';')
        minor_version=$(grep "const MINOR_VERSION" "${version_file}" | awk -F" " '{print $NF}' | tr -d ';')
        patch_version=$(grep "const PATCH_VERSION" "${version_file}" | awk -F" " '{print $NF}' | tr -d ';')
        extra_version=$(grep "const EXTRA_VERSION" "${version_file}" | awk -F"'" '{print $NF}' | tr -d ';')
        dev_status=$(grep "const DEV_STATUS" "${version_file}" | awk -F"'" '{print $2}')
        echo -n "  Joomla Version: $product $major_version.$minor_version.$patch_version"
        if [ -n "${extra_version}" ]; then
          echo "-$extra_version"
        fi
        echo " ${dev_status}"
      fi

      if ${docker_running}; then
        php_version=$(docker exec "jbt-${instance}" bash -c "php --version")
        # Extract the PHP version (first line) using sed, e.g. 'PHP 8.5.0beta3'
        php_version_number=$(echo "$php_version" | sed -n 's/^PHP \([^ ]*\) .*/PHP \1/p')
        # Check if Xdebug is included in the PHP version info
        if echo "$php_version" | grep -q "Xdebug"; then
          echo "  $php_version_number with Xdebug"
        else
          echo "  $php_version_number"
        fi
      fi

      if [ -f "joomla-${instance}/configuration.php" ]; then
        db_host=$(grep -m 1 "\$host" "joomla-${instance}/configuration.php" | sed 's/.*= *//; s/;.*//')
        db_name=$(grep -m 1 "\$db " "joomla-${instance}/configuration.php" | sed 's/.*= *//; s/;.*//')
        db_type=$(grep -m 1 "\$dbtype" "joomla-${instance}/configuration.php" | sed 's/.*= *//; s/;.*//')
        echo "  Database: Type ${db_type}, Host ${db_host}, Name ${db_name}"
      else
        echo "  Without configuration.php file?"
      fi


      echo "  /joomla-${instance}: $(du -ms "joomla-${instance}" | awk '{print $1}')MB"

      docker exec "jbt-${instance}" bash -c "JBT_INTERNAL=42 /jbt/scripts/repos.sh \"joomla-${instance}\""
    else
      echo "  /joomla-${instance} is NOT existing"
    fi
  else # history

    header "JBT Instance History"
    for file in logs/*; do
      head -1 "${file}"
      tail -1 "${file}"
      echo " "
    done
  fi
done
